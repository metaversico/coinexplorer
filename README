Coinexplorer maintains up-to-date information about target tokens across multiple chains.

Enables analysis of metadata, markets, prices, holders, arbitrages.

coinexplorer/
- src/
- http/
- jobs/
- svcs/
- crontab
- .env
- deno.json
- config.ts

The architecture uses stateless functional programming interfaces and decoupled orchestration.
It expects access to storage via configurable postgres.
Jobs are idempotent and can be triggered one-off or scheduled via cron.
All services are designed to be local-first, image-ready, and composed via environment variables.

coinexplorer/src/
- types/...
- solana/{get-token,get-account-txns,...}
- ethereum/{...}
- data/{write-token,read-token,write-txn,read-txn,...}
- persistence/{connect,write,read}
- metrics/{registry,exporters,...}

coinexplorer/http/
- api/{get-chains,get-tokens,get-pool,get-txn,get-prices,...}
- www/(website)
- adm/ (job running API metrics and orchestration)

coinexplorer/jobs/ 
- download-solana-tokens/
- download-solana-account-txns/
- download-solana-txns/
- extract-txn-swaps/
- extract-swap-prices/
(Jobs are pure modules orchestrated externally, no side effects on load.)

coinexplorer/svcs/
- local/... (up all services configured via .env.development)
- http-api/{up,Dockerfile,docker-compose} (HTTP Server serving API functions)
- http-www/... (HTTP Server serving frontend website)
- http-adm/... (Always-on HTTP server that runs jobs, serves /metrics, and receives POST job triggers)
- cron/... (Schedules job runs and executes via http-adm)
- persistence/... (postgres and pg exporter)
- observability/... (runs prometheus, vector, loki and grafana)

On services:
- All services can be run locally via Deno (e.g. `deno run svcs/job-runner/main.ts`)
- Each service can be built as an image and managed via Docker Compose
- Configuration passed via `.env`

On observability:
- Job runner and HTTP servers expose Prometheus metrics on `/metrics`
- Logs use structured JSON format (timestamp, job, status, duration, error)
- `svcs/observability/` available to hook in Prometheus + Grafana stack

On testing:
- Colocated test files preferred: `my-function.ts` + `my-function.test.ts`
- Integration and simulation tests live under `test/`
- All modules should be deterministic and testable in isolation

On Deno usage:
- Use `.ts` and import maps
- Use tasks for dev API
- Enforce stateless modules in `src/` and side-effect execution only in `jobs/` or `svcs/`

On frontend:
- React + shadcn/ui
- Static build served via `http-www`

System design values:
- Minimalism, determinism, and clarity
- Strong boundaries: src (pure), jobs (logic orchestration), svcs (infra/runtime)
- Metrics over mutable state for reliability
- Everything works locally, scales with infra
- Test driven development to minimize surplus design, starting with unit tests and ensuring high coverage
- Design and development guidance and tasks should be tracked on TASKS.md

CLI usage:
  deno task cxo <command>

Commands:
  show <address|ticker>
  markets <address|ticker> [<address|ticker>]
  swaps [-f] [--after|--before DATE] <address|ticker> [<address|ticker>]
  txn <sig>
